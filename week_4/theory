이론
트리는 뿌리와 가지로 구성되어 거꾸로 세워놓은 나무처럼 보이는 계층형 비선형 자료 구조.
큐(Queue), 스택(Stack) 은 자료구조에서 선형 구조라고 합니다. 선형 구조란 자료를 구성하고 있는 데이터들이 순차적으로 나열시킨 형태.
트리의 종류는 되게 다양하지만, 우선 이진 트리와 완전 이진 트리만 배워보자.
이진 트리(Binary Tree) 는 각 노드가 최대 두 개의 자식을 가진다. 완전 이진 트리(Complete Binary Tree)는 노드를 삽입할 때 최하단 왼쪽 노드부터 차례대로 삽입해야 한다.
완전 이진 트리는 높이가 h 일 때 최대 노드의 개수는 2^h -1 이므로, 높이는 최대로 해봤자 O(log(N)) 이다.
힙은 데이터에서 최대값과 최소값을 빠르게 찾기 위해 고안된 완전 이진 트리(Complete Binary Tree)
힙의 규칙 힙은 항상 큰 값이 상위 레벨에 있고 작은 값이 하위 레벨에 있어야 합니다. 은 항상 지켜져야 한다.
힙에서 원소를 추가할 때는 1. 원소를 맨 마지막에 넣습니다. 2. 그리고 부모 노드와 비교합니다. 만약 더 크다면 자리를 바꿉니다. 3. 부모 노드보다 작거나 가장 위에 도달하지 않을 때까지 2. 과정을 반복합니다. 이 과정은 높이만큼 반복하니, O(log(N))이 걸린다.
힙에서 원소를 제거할 때는 1. 루트 노드와 맨 끝에 있는 원소를 교체한다. 2. 맨 뒤에 있는 원소를 (원래 루트 노드)를 삭제한다. 3. 변경된 노드와 자식 노드들을 비교합니다. 두 자식 중 더 큰 자식과 비교해서 더 크다면 자리를 바꿉니다. 4. 자식 노드 둘 보다 부모 노드가 크거나 가장 바닥에 도달하지 않을 때까지 3. 과정을 반복합니다. 5. 2에서 제거한 원래 루트 노드를 반환합니다. 마찬가지로 이 과정은 높이만큼 반복하니, O(log(N))이 걸린다.
그래프란 연결되어 있는 정점와 정점간의 관계를 표현할 수 있는 자료구조.
노드(Node): 연결 관계를 가진 각 데이터. 간선(Edge): 노드 간의 관계를 표시한 선.
유방향 그래프와 무방향 그래프 두가지가 있지만, 이번 강의에서는 무방향 그래프에 대해서만 배워보자.
그래프를 표현하는 두 가지 방법은 다음과 같다.
인접 행렬(Adjacency Matrix): 2차원 배열로 그래프의 연결 관계를 표현. 모든 조합의 연결 여부를 저장해야 되기 때문에 O(노드^2) 만큼의 공간 사용.
인접 리스트(Adjacnecy List): 링크드 리스트로 그래프의 연결 관계를 표현. 연결 여부를 알기 위해서 리스트를 돌아봐야 하므로 최대 O(간선) 만큼의 시간. 대신 모든 조합의 연결 여부를 저장할 필요가 없으니 O(노드 + 간선) 만큼의 공간 사용.
14. DFS 와 BFS 는 자료의 검색, 트리나 그래프를 탐색하는 방법. DFS 는 한 노드를 시작으로 인접한 다른 노드를 재귀적으로 탐색해가고 끝까지 탐색. BFS는 한 노드를 시작으로 인접한 모든 정점들을 우선 방문하는 방법.
15. DFS 는 재귀적으로 반복되므로 재귀함수로 풀어도 되지만, Stack 으로 푸는 게 더 좋다. visited 라는 배열에 방문한 노드를 기록하자.
16. BFS 는 가장 처음에 넣은 노드들 먼저 방문해야 하므로 큐를 사용하자.
17. Dynamic Programming, 동적 계획법은 똑같은 작업을 다른 곳에서 다시 하지 않게 하기 위해 쓰는 방법. ex) 피보나치
18. 동적 계획법은 여러 개의 하위 문제를 풀고 그 결과를 기록하고 이용해 문제를 해결하는 알고리즘.
19. 결과를 기록하는 것을 메모이제이션(Memoization) 이라고 하고, 문제를 쪼갤 수 있는 구조를 겹치는 부분 문제(Overlapping Subproblem)라 한다.
20. 즉, 겹치는 부분 문제일 경우 동적 계획법을 사용하면 되는데, 이 때 사용하는 방법은 메모이제이션을 이용한다.
결론
트리는  계층형 비선형 자료 구조. 이진 트리는 자식이 두 개, 완전 이진 트리는 왼쪽부터 채워지는 이진 트리.
힙은 데이터에서 최대값과 최소값을 빠르게 찾기 위해 고안된 완전 이진 트리(Complete Binary Tree) 배열로 표현한다.
그래프는 연결되어 있는 정점와 정점간의 관계를 표현할 수 있는 자료구조. 인접 행렬과 인접 리스트로 표현한다.
DFS 와 BFS 는 완전 탐색이 필요한 경우에 쓴다. DFS 는 깊이 우선, BFS 는 넓이 우선으로 탐색한다.
겹치는 부분 문제일 경우 동적 계획법을 사용하면 되는데, 이 때 사용하는 방법은 메모이제이션을 이용한다.
실습
완전 이진 트리는 배열로 표현이 가능하다. 이 때, 현재 인덱스 * 2 -> 왼쪽 자식의 인덱스, 현재 인덱스 * 2 + 1 -> 오른쪽 자식의 인덱스, 현재 인덱스 // 2 -> 부모의 인덱스
실전에서 Heap 이라는 자료 구조를 사용하고 싶으면 heapq 모듈을 이용하자. heapq.heappush(heap, 4)