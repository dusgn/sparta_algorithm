이론

정렬은 데이터를 순서대로 나열하는 방법을 의미합니다. 정렬의 종류는 선택, 버블, 삽입, 병합 등 다양한 종류가 있다!
버블 정렬은 왼쪽에서부터 하나씩 하나씩 비교하면서 변경해나가는 정렬. for 문이 두개가 있어서 O(N^2) 이 걸린다.
선택 정렬은 다 돌면서 가장 작은 녀석을 바꿔나가는 정렬. 마찬가지로 for 문이 두개가 있어서 O(N^2) 이 걸린다.
삽입 정렬은 이미 정렬되어 있는 부대에 새로운 녀석을 끼워 넣는 방법! 마찬가지로 O(N^2) 이 걸린다. 다만, 최선의 경우에는 Ω(N)
병합 정렬은 정렬되어 있는 두 개의 배열을 합치면서 정렬하는 방법! 분할 정복, Divide and Conquer 방식을 이용한다.
MergeSort(0, N) = Merge(MergeSort(0, N/2) + MergeSort(N/2, N)) 의 개념이다.
Merge 함수의 시간 복잡도는 O(N) 인데, 이를 logN 만큼 반복하므로 총 O(NlogN) 만큼의 시간 복잡도가 걸린다.
스택은 한쪽 끝으로만 자료를 넣고 뺄 수 있는 자료 구조. 링크드 리스트를 이용해서 구현할 수 있다.
스택을 구현하기 위해서는 self.head 에 노드를 저장하면 된다! 어차피 head 에서만 넣고 꺼내는 구조니까!
큐는 한쪽 끝으로 자료를 넣고, 반대쪽에서는 자료를 뺄 수 있는 선형구조.
큐를 구현하기 위해서는 self.head 와 self.tail 에 노드를 저장해야 한다. head 에서 빼고 tail 에 넣어줘야 하니까!
다만, 그 과정에서 head 와 tail 둘 다 None 일 때를 항상 신경써주자!
해쉬는 컴퓨팅에서 키를 값에 매핑할 수 있는 구조인, 연관 배열 추가에 사용되는 자료 구조이다. 키를 통해 바로 데이터를 받아올 수 있으므로, 속도가 획기적으로 빨라진다.
그런데 이를 저장하기 위해서는 배열을 쓴다. 해쉬 함수라는 것을 이용해 임의의 키를 어느 인덱스에 넣어줘야 하는지 연결해야 한다.
해쉬 함수(Hash Function)는 임의의 길이를 갖는 메시지를 입력하여 고정된 길이의 해쉬값을 출력하는 함수이다
해쉬 구조에서는 같은 어레이의 인덱스로 매핑이 되어서 데이터가 덮어 씌워지는 충돌, Collision 을 해결해줘야 한다.
링크드 리스트를 이용해서 충돌을 해결하는 방식을 체이닝(Chaining) 이라고 한다. 개방 주소법(Open Addressing) 이라는 방식도 있다.
결론
정렬은 버블, 선택, 삽입, 병합 정렬 등 다양한 정렬 방법들이 존재한다.
스택은 한쪽 끝으로만 자료를 넣고 빼고, 스택은 한쪽 끝으로는 자료를 넣고 반대쪽에서는 자료를 빼는 구조.
해쉬 테이블(Hash Table)은 “키” 와 “데이터“를 저장함으로써 즉각적으로 데이터를 받아오고 업데이트하고 싶을 때 사용하는 자료구조.
해쉬 함수(Hash Function)는 임의의 길이를 갖는 메시지를 입력하여 고정된 길이의 해쉬값을 출력하는 함수
실습
스택을 실전에서 사용하고 싶다면, 파이썬의 list를 이용한다. stack = [] # 빈 스택 초기화 stack.append(4) # 스택 push(4) stack.append(3) # 스택 push(3) top = stack.pop() # 스택 pop
파이썬에서 두 변수의 값을 바꾸는 방법 a, b = b, a